---
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/Navbar.astro";
---
<style>
  /* Reset and Base Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background: #0f172a;
  color: #e7e9ea;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
  line-height: 1.4;
  overflow-x: hidden;
}

/* Show selected image filename */
.selected-image-name {
  color: #1d9bf0;
  font-size: 0.85rem;
  margin-left: 0.5rem;
  font-weight: 500;
  background: rgba(29,155,240,0.08);
  border-radius: 12px;
  padding: 0.2rem 1rem;
  display: inline-block;
  vertical-align: middle;
  max-width: 160px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Header */
.header {
  background: rgba(0, 0, 0, 0.65);
  backdrop-filter: blur(12px);
  border-bottom: 1px solid #2f3336;
  padding: 1rem 0;
  position: sticky;
  top: 0;
  z-index: 100;
}

.header h1 {
  font-size: 1.25rem;
  font-weight: 800;
  color: #e7e9ea;
  text-align: center;
}

.header span {
  color: #1d9bf0;
}

.header p {
  font-size: 0.9rem;
  color: #71767b;
  text-align: center;
  margin-top: 0.25rem;
  font-weight: 400;
}

/* Main Container */
.container {
  max-width: 600px;
  margin: 0 auto;
  min-height: 100vh;
}

.home-feed {
  max-width: 600px;
  margin: 0 auto;
  border-left: 1px solid #2f3336;
  border-right: 1px solid #2f3336;
  min-height: 100vh;
  background: rgba(0, 0, 0, 0.4);
}

/* Report Box (Compose Tweet Style) */
.report-box {
  background: transparent;
  border-bottom: 1px solid #2f3336;
  padding: 1rem;
  position: relative;
}

.report-box::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: #2f3336;
}

.report-row {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.report-input-wrapper {
  display: flex;
  gap: 0.75rem;
  align-items: flex-start;
}

.report-input-wrapper .avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: #1d9bf0;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
  flex-shrink: 0;
  margin-top: 0.25rem;
}

.input-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.report-input {
  background: transparent;
  color: #e7e9ea;
  border: none;
  font-size: 1.25rem;
  font-weight: 400;
  resize: none;
  min-height: 50px;
  outline: none;
  font-family: inherit;
  line-height: 1.4;
  padding: 0.75rem 0;
}

.report-input::placeholder {
  color: #71767b;
  font-size: 1.25rem;
}

.report-input:focus::placeholder {
  opacity: 0.6;
}

.report-controls {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.75rem 0 0.25rem 0;
  border-top: 1px solid #2f3336;
}

.report-left-controls {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.report-select {
  background: transparent;
  color: #1d9bf0;
  border: 1px solid #1d9bf0;
  border-radius: 20px;
  padding: 0.375rem 0.75rem;
  font-size: 0.875rem;
  font-weight: 600;
  outline: none;
  cursor: pointer;
  transition: all 0.2s;
}

.report-select:hover {
  background: rgba(29, 155, 240, 0.1);
}

.report-select:focus {
  background: rgba(29, 155, 240, 0.1);
}

.image-upload-label {
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  background: transparent;
  border: none;
  border-radius: 50%;
  width: 36px;
  height: 36px;
  transition: background 0.2s;
  padding: 0;
}

.image-upload-label:hover {
  background: rgba(29, 155, 240, 0.1);
}

.image-upload-icon {
  width: 20px;
  height: 20px;
  filter: invert(42%) sepia(93%) saturate(1352%) hue-rotate(187deg) brightness(119%) contrast(109%);
}

.report-right-controls {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.contact-input {
  background: transparent;
  color: #e7e9ea;
  border: 1px solid #2f3336;
  border-radius: 20px;
  padding: 0.375rem 0.75rem;
  font-size: 0.875rem;
  outline: none;
  width: 140px;
  transition: border-color 0.2s;
}

.contact-input:focus {
  border-color: #1d9bf0;
}

.contact-input::placeholder {
  color: #71767b;
}

.send-btn {
  background: #1d9bf0;
  border: none;
  border-radius: 20px;
  height: 36px;
  padding: 0 1rem;
  color: white;
  font-weight: 700;
  font-size: 0.9rem;
  cursor: pointer;
  transition: background 0.2s;
  min-width: 70px;
}

.send-btn:hover:not(:disabled) {
  background: #1a8cd8;
}

.send-btn:disabled {
  background: #0f4e78;
  cursor: not-allowed;
  opacity: 0.5;
}

/* Search and Filter */
.search-filter {
  background: transparent;
  border-bottom: 1px solid #2f3336;
  padding: 0.75rem 1rem;
  display: flex;
  gap: 0.75rem;
  position: sticky;
  top: 73px;
  backdrop-filter: blur(12px);
  z-index: 50;
}

#searchInput {
  flex: 1;
  background: #202327;
  color: #e7e9ea;
  border: 1px solid #2f3336;
  border-radius: 20px;
  padding: 0.75rem 1rem;
  font-size: 0.9rem;
  outline: none;
  transition: border-color 0.2s;
}

#searchInput:focus {
  border-color: #1d9bf0;
  background: #000;
}

#searchInput::placeholder {
  color: #71767b;
}

#filterSelect {
  background: #202327;
  color: #e7e9ea;
  border: 1px solid #2f3336;
  border-radius: 20px;
  padding: 0.75rem 1rem;
  font-size: 0.9rem;
  outline: none;
  cursor: pointer;
  min-width: 120px;
  transition: border-color 0.2s;
}

#filterSelect:focus {
  border-color: #1d9bf0;
}

/* Feed Container */
#cover {
  background: transparent;
}

/* Item Cards (Tweet Style) */
.item-card {
  background: transparent;
  border-bottom: 1px solid #2f3336;
  padding: 1rem;
  transition: background-color 0.2s;
  cursor: pointer;
}

.item-card:hover {
  background: rgba(255, 255, 255, 0.03);
}

.user-header {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 0.75rem;
}

.profile-pic {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
  flex-shrink: 0;
}

.username {
  color: #e7e9ea;
  font-weight: 700;
  font-size: 0.9rem;
}

.actions {
  margin-left: auto;
  display: flex;
  gap: 0.5rem;
}

.edit-btn, .delete-btn {
  width: 20px;
  height: 20px;
  opacity: 0.6;
  cursor: pointer;
  transition: opacity 0.2s;
  filter: invert(1);
}

.edit-btn:hover, .delete-btn:hover {
  opacity: 1;
}

.item-img {
  width: 100%;
  max-height: 400px;
  object-fit: cover;
  border-radius: 16px;
  margin: 0.75rem 0;
  border: 1px solid #2f3336;
}

.item-card p {
  color: #e7e9ea;
  font-size: 0.9rem;
  line-height: 1.4;
  margin: 0.5rem 0;
  word-wrap: break-word;
}

.claim-btn {
  background: transparent;
  color: #1d9bf0;
  border: 1px solid #1d9bf0;
  border-radius: 20px;
  padding: 0.375rem 0.75rem;
  font-size: 0.875rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s;
  margin-top: 0.75rem;
}

.claim-btn:hover:not(:disabled) {
  background: rgba(29, 155, 240, 0.1);
}

.claim-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Hide original inline forms - replaced with modals */
.edit-form, .claim-form {
  display: none !important;
}

/* Modal Overlay Styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.75);
  backdrop-filter: blur(8px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.modal-overlay.active {
  opacity: 1;
  visibility: visible;
}

.modal-content {
  background: #15202b;
  border: 1px solid #2f3336;
  border-radius: 16px;
  padding: 1.5rem;
  max-width: 500px;
  width: 90%;
  max-height: 80vh;
  overflow-y: auto;
  transform: scale(0.9) translateY(20px);
  transition: transform 0.3s ease;
  position: relative;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
}

.modal-overlay.active .modal-content {
  transform: scale(1) translateY(0);
}

/* Modal Header */
.modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #2f3336;
}

.modal-title {
  color: #e7e9ea;
  font-size: 1.25rem;
  font-weight: 700;
  margin: 0;
}

.modal-close {
  background: transparent;
  border: none;
  color: #71767b;
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 50%;
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s;
}

.modal-close:hover {
  background: rgba(239, 243, 244, 0.1);
  color: #e7e9ea;
}

/* Edit Form Modal Styles */
.edit-form-modal {
  background: transparent;
  border: none;
  padding: 0;
}

.edit-form-modal .edit-description {
  width: 100%;
  background: #202327;
  color: #e7e9ea;
  border: 1px solid #2f3336;
  border-radius: 12px;
  padding: 1rem;
  font-size: 1rem;
  resize: vertical;
  min-height: 120px;
  outline: none;
  font-family: inherit;
  margin-bottom: 1.5rem;
  transition: border-color 0.2s;
}

.edit-form-modal .edit-description:focus {
  border-color: #1d9bf0;
  background: #000;
}

.edit-form-modal .modal-actions {
  display: flex;
  gap: 0.75rem;
  justify-content: flex-end;
}

.edit-form-modal .save-edit,
.edit-form-modal .cancel-edit {
  background: #1d9bf0;
  color: white;
  border: none;
  border-radius: 20px;
  padding: 0.75rem 1.5rem;
  font-size: 0.9rem;
  font-weight: 700;
  cursor: pointer;
  transition: all 0.2s;
  min-width: 80px;
}

.edit-form-modal .cancel-edit {
  background: transparent;
  color: #e7e9ea;
  border: 1px solid #2f3336;
}

.edit-form-modal .save-edit:hover {
  background: #1a8cd8;
}

.edit-form-modal .cancel-edit:hover {
  background: rgba(239, 243, 244, 0.1);
}

/* Claim Form Modal Styles */
.claim-form-modal {
  background: transparent;
  border: none;
  padding: 0;
}

.claim-form-modal .form-group {
  margin-bottom: 1.5rem;
}

.claim-form-modal .form-label {
  display: block;
  color: #e7e9ea;
  font-size: 0.9rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.claim-form-modal .claim-description {
  width: 100%;
  background: #202327;
  color: #e7e9ea;
  border: 1px solid #2f3336;
  border-radius: 12px;
  padding: 1rem;
  font-size: 1rem;
  resize: vertical;
  min-height: 100px;
  outline: none;
  font-family: inherit;
  transition: border-color 0.2s;
}

.claim-form-modal .claim-description:focus {
  border-color: #1d9bf0;
  background: #000;
}

.claim-form-modal .claim-description::placeholder {
  color: #71767b;
}

.claim-form-modal .file-upload-wrapper {
  position: relative;
  display: block;
}

.claim-form-modal .file-upload-label {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  background: #202327;
  color: #e7e9ea;
  border: 2px dashed #2f3336;
  border-radius: 12px;
  padding: 1rem;
  cursor: pointer;
  transition: all 0.2s;
  text-align: center;
  min-height: 60px;
}

.claim-form-modal .file-upload-label:hover {
  border-color: #1d9bf0;
  background: rgba(29, 155, 240, 0.05);
}

.claim-form-modal .file-upload-label.has-file {
  border-style: solid;
  border-color: #00ba7c;
  background: rgba(0, 186, 124, 0.1);
  color: #00ba7c;
}

.claim-form-modal .file-upload-icon {
  width: 24px;
  height: 24px;
  opacity: 0.7;
}

.claim-form-modal .file-upload-text {
  font-size: 0.9rem;
  font-weight: 500;
}

.claim-form-modal .claim-image {
  display: none;
}

.claim-form-modal .modal-actions {
  display: flex;
  gap: 0.75rem;
  justify-content: flex-end;
  margin-top: 1.5rem;
}

.claim-form-modal .submit-claim,
.claim-form-modal .cancel-claim {
  background: #1d9bf0;
  color: white;
  border: none;
  border-radius: 20px;
  padding: 0.75rem 1.5rem;
  font-size: 0.9rem;
  font-weight: 700;
  cursor: pointer;
  transition: all 0.2s;
  min-width: 100px;
}

.claim-form-modal .cancel-claim {
  background: transparent;
  color: #e7e9ea;
  border: 1px solid #2f3336;
}

.claim-form-modal .submit-claim:hover:not(:disabled) {
  background: #1a8cd8;
}

.claim-form-modal .submit-claim:disabled {
  background: #0f4e78;
  cursor: not-allowed;
  opacity: 0.6;
}

.claim-form-modal .cancel-claim:hover {
  background: rgba(239, 243, 244, 0.1);
}

/* Loading state for submit button */
.claim-form-modal .submit-claim.loading {
  position: relative;
  color: transparent;
}

.claim-form-modal .submit-claim.loading::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 16px;
  height: 16px;
  border: 2px solid #ffffff40;
  border-top: 2px solid #ffffff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

/* Loader */
.loader {
  display: none;
  width: 32px;
  height: 32px;
  border: 3px solid #2f3336;
  border-top: 3px solid #1d9bf0;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 2rem auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Popup Styles */
.popup {
  display: none;
  position: fixed;
  top: 2rem;
  left: 50%;
  transform: translateX(-50%);
  min-width: 220px;
  max-width: 90vw;
  padding: 1rem 2rem;
  border-radius: 8px;
  font-size: 0.9rem;
  font-weight: 600;
  text-align: center;
  z-index: 2000;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  transition: opacity 0.3s;
}

.popup.success {
  background: #00ba7c;
  color: #fff;
}

.popup.error {
  background: #f4212e;
  color: #fff;
}

.action-popup {
  position: fixed;
  top: 2rem;
  left: 50%;
  transform: translateX(-50%) translateY(-40px);
  min-width: 200px;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  font-size: 0.875rem;
  font-weight: 600;
  text-align: center;
  z-index: 2000;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  opacity: 0;
  pointer-events: none;
  transition: all 0.3s ease;
}

.action-popup.success {
  background: #00ba7c;
  color: #fff;
}

.action-popup.error {
  background: #f4212e;
  color: #fff;
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
  .home-feed {
    border-left: none;
    border-right: none;
  }
  
  .header {
    padding: 0.75rem 1rem;
  }
  
  .report-box {
    padding: 0.75rem 1rem;
  }
  
  .report-input-wrapper .avatar {
    width: 32px;
    height: 32px;
    font-size: 0.8rem;
  }
  
  .report-input {
    font-size: 1.1rem;
  }
  
  .report-input::placeholder {
    font-size: 1.1rem;
  }
  
  .report-controls {
    flex-direction: column;
    gap: 0.75rem;
    align-items: stretch;
  }
  
  .report-left-controls {
    justify-content: space-between;
  }
  
  .report-right-controls {
    justify-content: space-between;
  }
  
  .contact-input {
    flex: 1;
    width: auto;
  }
  
  .search-filter {
    flex-direction: column;
    gap: 0.5rem;
    top: 65px;
  }
  
  .item-card {
    padding: 0.75rem 1rem;
  }
  
  .user-header {
    gap: 0.5rem;
  }
  
  .profile-pic {
    width: 32px;
    height: 32px;
  }
  
  .username {
    font-size: 0.85rem;
  }

  /* Modal mobile styles */
  .modal-content {
    padding: 1.25rem;
    width: 95%;
    max-height: 85vh;
  }
  
  .modal-title {
    font-size: 1.1rem;
  }
  
  .edit-form-modal .edit-description,
  .claim-form-modal .claim-description {
    font-size: 0.95rem;
    padding: 0.875rem;
    min-height: 100px;
  }
  
  .claim-form-modal .file-upload-label {
    padding: 0.875rem;
    font-size: 0.85rem;
  }
  
  .edit-form-modal .save-edit,
  .edit-form-modal .cancel-edit,
  .claim-form-modal .submit-claim,
  .claim-form-modal .cancel-claim {
    padding: 0.625rem 1.25rem;
    font-size: 0.85rem;
    min-width: 70px;
  }
}

@media (max-width: 480px) {
  .header h1 {
    font-size: 1.1rem;
  }
  
  .header p {
    font-size: 0.8rem;
  }
  
  .report-input {
    font-size: 1rem;
    min-height: 40px;
  }
  
  .report-input::placeholder {
    font-size: 1rem;
  }
  
  .report-select,
  .contact-input {
    font-size: 0.8rem;
  }
  
  .send-btn {
    font-size: 0.8rem;
    padding: 0 0.75rem;
    min-width: 60px;
  }
  
  #searchInput,
  #filterSelect {
    font-size: 0.85rem;
    padding: 0.625rem 0.875rem;
  }
  
  .item-card p {
    font-size: 0.85rem;
  }

  /* Mobile modal styles */
  .modal-content {
    padding: 1rem;
    width: 98%;
  }
  
  .modal-header {
    margin-bottom: 1.25rem;
    padding-bottom: 0.75rem;
  }
  
  .modal-actions {
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .edit-form-modal .save-edit,
  .edit-form-modal .cancel-edit,
  .claim-form-modal .submit-claim,
  .claim-form-modal .cancel-claim {
    width: 100%;
    justify-content: center;
  }
}

.avatar-img {
  width: 44px;
  height: 44px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #38bdf8;
  background: #fff;
  display: block;
}
</style>
<Layout>
  <Navbar />
  <!-- MAIN CONTENT -->
  <main class="home-feed">
    <!-- Twitter-style Compose Section -->
    <section class="report-box">
      <form id="reportForm" method="post" action="">
        <div class="report-row">
          <div class="report-input-wrapper">
            <div class="avatar"></div>
            <div class="input-content">
              <textarea
                id="description"
                name="description"
                class="report-input"
                placeholder="What's lost or found?"
                required
                rows="1"
              ></textarea>
            </div>
          </div>
          
          <div class="report-controls">
            <div class="report-left-controls">
              <select
                id="itemCategory"
                name="category"
                class="report-select"
                required
              >
                <option value="">Category</option>
                <option value="phone">📱 Phone</option>
                <option value="id">🆔 ID Card</option>
                <option value="bag">🎒 Bag</option>
                <option value="wallet">💰 Wallet</option>
                <option value="other">📦 Other</option>
              </select>
              
              <label for="itemImage" class="image-upload-label" title="Add image">
                <img
                  src="https://cdn-icons-png.flaticon.com/512/1828/1828925.png"
                  alt="Upload"
                  class="image-upload-icon"
                />
                 <input
                  type="file"
                  id="itemImage"
                  name="itemImage"
                  accept="image/*"
                  class="report-file"
                  required
                  style="display:none;" 
                />
               
              </label>
               <span id="selectedImageName" class="selected-image-name"></span>
            </div>
            
            <div class="report-right-controls">
              <input
                type="text"
                id="contact"
                name="contact"
                class="contact-input"
                placeholder="Contact info"
                required
              />
              <button type="submit" class="send-btn">
                Post
              </button>
            </div>
          </div>
        </div>
      </form>
    </section>

    <!-- Popup for notifications -->
    <div id="popup" class="popup"></div>

    <!-- Search and Filter Section -->
    <section class="search-filter">
      <input type="text" id="searchInput" placeholder="Search reports..." />
      <select id="filterSelect">
        <option value="all">All Categories</option>
        <option value="phone">📱 Phone</option>
        <option value="id">🆔 ID Card</option>
        <option value="bag">🎒 Bag</option>
        <option value="wallet">💰 Wallet</option>
        <option value="other">📦 Other</option>
      </select>
    </section>

    <!-- Feed Section -->
    <section class="check">
      <main class="container" id="cover">
        <div id="loader" class="loader"></div>
      </main>
    </section>
  </main>

  <!-- SCRIPTS -->
   <script is:inline>
import { API_URL } from "../config.js";

async function getCurrentUser() {
  try {
    const res = await fetch(`${API_URL}/api/user`, { credentials: "include" });
    if (!res.ok) throw new Error("Failed to fetch user");
    const data = await res.json();
    if (!data.user) {
      location.href = "/"; // or "./" if you prefer
    }
    currentUserId = data.user._id;
    setCurrentUserAvatar(data.user);
  } catch (err) {
    console.error("Auth error:", err);
    location.href = "/";
  }
}

function setCurrentUserAvatar(user) {
  const avatarDiv = document.querySelector(".avatar");
  if (avatarDiv) {
    const profilePic =
      user?.profilePic || "https://cdn-icons-png.flaticon.com/512/3135/3135715.png";
    avatarDiv.innerHTML = `<img src="${profilePic}" alt="Profile" class="avatar-img" />`;
  }
}


// Report form logic
const reportForm = document.getElementById("reportForm");
const popup = document.getElementById("popup");

function showPopup(message, success = true) {
  popup.textContent = message;
  popup.className = "popup " + (success ? "success" : "error");
  popup.style.display = "block";
  setTimeout(() => {
    popup.style.display = "none";
  }, 2500);
}

reportForm.addEventListener("submit", async (e) => {
  e.preventDefault();
  const formData = new FormData(reportForm);

  fetch(`${API_URL}/api/reports`, {
    method: "POST",
    body: formData,
    credentials: "include",
  })
    .then((res) => res.json())
    .then((data) => {
      if (
        data &&
        data.message &&
        data.message.toLowerCase().includes("success")
      ) {
        showPopup("Report sent successfully!", true);
        reportForm.reset();
        const imageNameSpan = document.getElementById("selectedImageName");
        if (imageNameSpan) {
          imageNameSpan.textContent = "";
        }
      } else {
        showPopup("Failed to send report.", false);
      }
    })
    .catch((err) => {
      showPopup("Failed to send report.", false);
      console.error(err);
    });
});

//feed logic
import { io } from "socket.io-client";
const socket = io(API_URL);
const cover = document.getElementById("cover");
const searchInput = document.getElementById("searchInput");
const filterSelect = document.getElementById("filterSelect");
const loader = document.getElementById("loader");
let allReports = [];
let currentUserId = null;

socket.on("connect", () => {
  console.log("connected to socket.io");
});




function showLoader() {
  loader.style.display = "block";
}
function hideLoader() {
  loader.style.display = "none";
}

showLoader();

getCurrentUser().then(() => {
  fetch(`${API_URL}/api/reports`, {
    method: "GET",
    credentials: "include",
  })
    .then((res) => res.json())
    .then((reports) => {
      hideLoader();
      allReports = reports;
      renderReports(allReports);
    })
    .catch((err) => {
      console.error(err);
      hideLoader();
    });
});

socket.on("newReport", (newReport) => {
  allReports.unshift(newReport);
  renderReports(allReports);
});

// Add popup markup to the page
if (!document.getElementById("action-popup")) {
  const popupDiv = document.createElement("div");
  popupDiv.id = "action-popup";
  popupDiv.className = "action-popup";
  document.body.appendChild(popupDiv);
}

// Popup function
function showActionPopup(message, success = true) {
  const popup = document.getElementById("action-popup");
  popup.textContent = message;
  popup.className = "action-popup " + (success ? "success" : "error");
  popup.style.opacity = "1";
  popup.style.transform = "translateY(0)";
  popup.style.pointerEvents = "auto";
  setTimeout(() => {
    popup.style.opacity = "0";
    popup.style.transform = "translateY(-40px)";
    popup.style.pointerEvents = "none";
  }, 2000);
}

// Modal management functions
function createModalOverlay() {
  const overlay = document.createElement("div");
  overlay.className = "modal-overlay";
  overlay.innerHTML = `
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title"></h3>
        <button class="modal-close" aria-label="Close">×</button>
      </div>
      <div class="modal-body"></div>
    </div>
  `;
  document.body.appendChild(overlay);
  return overlay;
}

function showModal(overlay) {
  document.body.style.overflow = "hidden";
  overlay.classList.add("active");
}

function hideModal(overlay) {
  document.body.style.overflow = "";
  overlay.classList.remove("active");
  setTimeout(() => {
    if (overlay.parentNode) {
      overlay.parentNode.removeChild(overlay);
    }
  }, 300);
}

function createEditModal(report, onSave) {
  const overlay = createModalOverlay();
  const title = overlay.querySelector(".modal-title");
  const body = overlay.querySelector(".modal-body");
  const closeBtn = overlay.querySelector(".modal-close");

  title.textContent = "Edit Report";
  body.innerHTML = `
    <div class="edit-form-modal">
      <textarea class="edit-description" placeholder="Describe what you found or lost...">${
        report.description || ""
      }</textarea>
      <div class="modal-actions">
        <button class="cancel-edit">Cancel</button>
        <button class="save-edit">Save Changes</button>
      </div>
    </div>
  `;

  const textarea = body.querySelector(".edit-description");
  const saveBtn = body.querySelector(".save-edit");
  const cancelBtn = body.querySelector(".cancel-edit");

  // Auto-focus and select all text
  setTimeout(() => {
    textarea.focus();
    textarea.select();
  }, 100);

  // Handle save
  saveBtn.addEventListener("click", () => {
    const updatedDesc = textarea.value.trim();
    if (!updatedDesc) {
      showActionPopup("Please enter a description", false);
      return;
    }

    saveBtn.disabled = true;
    saveBtn.textContent = "Saving...";

    onSave(updatedDesc)
      .then(() => {
        hideModal(overlay);
        showActionPopup("Changes saved!", true);
      })
      .catch((err) => {
        console.error("Error saving edit:", err);
        showActionPopup("Failed to save changes.", false);
        saveBtn.disabled = false;
        saveBtn.textContent = "Save Changes";
      });
  });

  // Handle cancel
  const handleCancel = () => hideModal(overlay);
  cancelBtn.addEventListener("click", handleCancel);
  closeBtn.addEventListener("click", handleCancel);

  // Handle overlay click
  overlay.addEventListener("click", (e) => {
    if (e.target === overlay) {
      handleCancel();
    }
  });

  // Handle escape key
  const handleEscape = (e) => {
    if (e.key === "Escape") {
      handleCancel();
      document.removeEventListener("keydown", handleEscape);
    }
  };
  document.addEventListener("keydown", handleEscape);

  showModal(overlay);
}

function createClaimModal(report, onSubmit) {
  const overlay = createModalOverlay();
  const title = overlay.querySelector(".modal-title");
  const body = overlay.querySelector(".modal-body");
  const closeBtn = overlay.querySelector(".modal-close");

  title.textContent = "Claim This Item";
  body.innerHTML = `
    <div class="claim-form-modal">
      <div class="form-group">
        <label class="form-label">Describe your item and how/where you lost it</label>
        <textarea class="claim-description" placeholder="Please provide details about your item, when and where you lost it, and any identifying features..." required></textarea>
      </div>
      
      <div class="form-group">
        <label class="form-label">Upload proof of ownership</label>
        <div class="file-upload-wrapper">
          <label class="file-upload-label" for="claim-image-input">
            <svg class="file-upload-icon" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd" />
            </svg>
            <div class="file-upload-text">
              <div>Click to upload an image</div>
              <div style="font-size: 0.8rem; opacity: 0.7; margin-top: 4px;">PNG, JPG up to 10MB</div>
            </div>
          </label>
          <input type="file" id="claim-image-input" class="claim-image" accept="image/*" required />
        </div>
      </div>
      
      <div class="modal-actions">
        <button class="cancel-claim">Cancel</button>
        <button class="submit-claim">Submit Claim</button>
      </div>
    </div>
  `;

  const textarea = body.querySelector(".claim-description");
  const fileInput = body.querySelector(".claim-image");
  const fileLabel = body.querySelector(".file-upload-label");
  const fileText = body.querySelector(".file-upload-text");
  const submitBtn = body.querySelector(".submit-claim");
  const cancelBtn = body.querySelector(".cancel-claim");

  // Handle file selection
  fileInput.addEventListener("change", () => {
    if (fileInput.files[0]) {
      fileLabel.classList.add("has-file");
      fileText.innerHTML = `
        <div>✓ ${fileInput.files[0].name}</div>
        <div style="font-size: 0.8rem; opacity: 0.7; margin-top: 4px;">Click to change</div>
      `;
    } else {
      fileLabel.classList.remove("has-file");
      fileText.innerHTML = `
        <div>Click to upload an image</div>
        <div style="font-size: 0.8rem; opacity: 0.7; margin-top: 4px;">PNG, JPG up to 10MB</div>
      `;
    }
  });

  // Auto-focus textarea
  setTimeout(() => {
    textarea.focus();
  }, 100);

  // Handle submit
  submitBtn.addEventListener("click", () => {
    const description = textarea.value.trim();
    if (!description || !fileInput.files[0]) {
      showActionPopup("Please fill all fields and upload an image", false);
      return;
    }

    submitBtn.disabled = true;
    submitBtn.classList.add("loading");

    const formData = new FormData();
    formData.append("description", description);
    formData.append("image", fileInput.files[0]);

    onSubmit(formData)
      .then(() => {
        hideModal(overlay);
        showActionPopup("Claim submitted!", true);
      })
      .catch((err) => {
        console.error("Error submitting claim:", err);
        showActionPopup("Error submitting claim", false);
        submitBtn.disabled = false;
        submitBtn.classList.remove("loading");
      });
  });

  // Handle cancel
  const handleCancel = () => hideModal(overlay);
  cancelBtn.addEventListener("click", handleCancel);
  closeBtn.addEventListener("click", handleCancel);

  // Handle overlay click
  overlay.addEventListener("click", (e) => {
    if (e.target === overlay) {
      handleCancel();
    }
  });

  // Handle escape key
  const handleEscape = (e) => {
    if (e.key === "Escape") {
      handleCancel();
      document.removeEventListener("keydown", handleEscape);
    }
  };
  document.addEventListener("keydown", handleEscape);

  showModal(overlay);
}

function renderReports(reports) {
  cover.innerHTML = "";
  reports.forEach((report) => {
    const card = document.createElement("div");
    card.classList.add("item-card");

    const defaultAvatar =
      "https://i.pinimg.com/736x/21/f6/fc/21f6fc4abd29ba736e36e540a787e7da.jpg";
    const username = report.user?.name || "Anonymous";
    const profilePic = report.user?.profilePic || defaultAvatar;
    const isOwner = currentUserId && report.user?._id === currentUserId;

    card.innerHTML = `
      <div class="user-header">
        <img src="${profilePic}" alt="" class="profile-pic"/>
        <span class="username">${username}</span>
        ${
          isOwner
            ? `<span class='actions'>
                <img src='https://cdn-icons-png.flaticon.com/128/1828/1828911.png' class='edit-btn' data-id='${report._id}' title='Edit'/>
                <img src='https://cdn-icons-png.flaticon.com/128/3405/3405244.png' class='delete-btn' data-id='${report._id}' title='Delete'/>
              </span>`
            : ""
        }
      </div>
      
      ${
        report.image
          ? `<img src="${API_URL}/uploads/${report.image}" class="item-img" alt="${report.description}" />`
          : ""
      }
      <p>${report.description || ""}</p>
      
      ${!isOwner ? `<button class="claim-btn">Claim</button>` : ""}
    `;

    // Owner actions
    const editBtn = card.querySelector(".edit-btn");
    const deleteBtn = card.querySelector(".delete-btn");

    if (editBtn) {
      editBtn.addEventListener("click", () => {
        createEditModal(report, (updatedDesc) => {
          return fetch(`${API_URL}/api/reports/${report._id}`, {
            method: "PUT",
            credentials: "include",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              description: updatedDesc,
            }),
          })
            .then((res) => res.json())
            .then((updatedReport) => {
              report.description = updatedDesc;
              renderReports(allReports);
            });
        });
      });
    }

    if (deleteBtn) {
      deleteBtn.addEventListener("click", () => {
        const confirmDelete = window.confirm(
          "Are you sure you want to delete this report?"
        );
        if (confirmDelete) {
          fetch(`${API_URL}/api/reports/${report._id}`, {
            method: "DELETE",
            credentials: "include",
          })
            .then((res) => res.json())
            .then(() => {
              allReports = allReports.filter((r) => r._id !== report._id);
              renderReports(allReports);
              showActionPopup("Report deleted!", true);
            })
            .catch((err) => {
              console.error("Error deleting report:", err);
              showActionPopup("Failed to delete report.", false);
            });
        }
      });
    }

    // Claim button
    const claimBtn = card.querySelector(".claim-btn");
    if (claimBtn) {
      claimBtn.addEventListener("click", () => {
        createClaimModal(report, (formData) => {
          return fetch(`${API_URL}/claims/${report._id}`, {
            method: "POST",
            body: formData,
            credentials: "include",
          })
            .then((res) => res.json())
            .then((data) => {
              if (data.success) {
                claimBtn.textContent = "Pending";
                claimBtn.disabled = true;
              } else {
                throw new Error("Failed to submit claim");
              }
            });
        });
      });
    }

    cover.appendChild(card);
  });
}

function filterItems() {
  const searchTerm = searchInput.value.toLowerCase();
  const selectedCategory = filterSelect.value;
  const filtered = allReports.filter((report) => {
    const matchesSearch = report.description.toLowerCase().includes(searchTerm);
    const matchesCategory =
      selectedCategory === "all" || report.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });
  renderReports(filtered);
}

searchInput.addEventListener("input", filterItems);
filterSelect.addEventListener("change", filterItems);


    const file = document.querySelector(".report-file");
    file?.addEventListener('change', function showSelectedImageName(e) {
    const fileInput = e.target;
    const nameSpan = document.getElementById("selectedImageName");
    if (fileInput.files && fileInput.files[0]) {
      nameSpan.textContent = fileInput.files[0].name;
    } else {
      nameSpan.textContent = "";
    }
  })
    

   </script>
  
</Layout>